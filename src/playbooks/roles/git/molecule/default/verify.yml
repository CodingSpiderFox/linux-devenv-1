---
- name: verify
  hosts: all
  tasks:
    - name: assert test environment
      block:
        - name: determine remote user
          command: whoami
          register: result
          changed_when: False
        - name: assert remote user
          assert:
            that:
              - result.stdout == "vagrant"
            fail_msg: "actual result is {{ result.stdout }}"
    - name: test command existence
      command: bash -c "type {{ item }}"
      register: result
      changed_when: False
      with_items:
        - git
        - gitk
    - name: test git version
      block:
        - name: determine git version
          command: bash -c "git version | sed 's|git version ||g' | tr -d '\n'"
          register: result
          changed_when: False
        - name: assert git version
          assert:
            that:
              - result.stdout is version('2.23.0', '>=')
              - result.stdout is version('3.0.0', '<')
            fail_msg: "actual version is {{ result.stdout }}"
    - name: test git ignore
      block:
        - name: create temporary working directory
          tempfile:
            state: directory
          register: tmpdir
        - name: initialize local git repository
          command: git init # noqa 303
          args:
            chdir: "{{ tmpdir.path }}"
        - name: assert test environment
          block:
            - name: get status
              command: bash -c "git ls-files --others --exclude-standard | wc -l"
              args:
                chdir: "{{ tmpdir.path }}"
              register: result
              changed_when: False
            - name: assert status before testing
              assert:
                that:
                  - result.stdout == "0"
                fail_msg: "actual result is {{ result.stdout }}"
        - name: test git ignores a file compile_commands.json
          block:
            - name: create an empty file compile_commands.json that is ignored by git
              copy:
                content: ""
                dest: "{{ tmpdir.path }}/compile_commands.json"
            - name: get status
              command: bash -c "git ls-files --others --exclude-standard | wc -l"
              args:
                chdir: "{{ tmpdir.path }}"
              register: result
              changed_when: False
            - name: assert that git ignores a file compile_commands.json
              assert:
                that:
                  - result.stdout == "0"
                fail_msg: "actual result is {{ result.stdout }}"
        - name: test git ignores a directory .vscode
          block:
            - name: create a directory .vscode that is ignored by git
              file:
                dest: "{{ tmpdir.path }}/.vscode"
                state: directory
            - name: create an empty file in .vscode directory
              copy:
                content: ""
                dest: "{{ tmpdir.path }}/.vscode/hoge"
            - name: get status
              command: bash -c "git ls-files --others --exclude-standard | wc -l"
              args:
                chdir: "{{ tmpdir.path }}"
              register: result
              changed_when: False
            - name: assert that git ignores files in a directory .vscode
              assert:
                that:
                  - result.stdout == "0"
                fail_msg: "actual result is {{ result.stdout }}"
        - name: test git does not ignore a file README.md
          block:
            - name: create an empty file README.md that is not ignored by git
              copy:
                content: ""
                dest: "{{ tmpdir.path }}/README.md"
            - name: get status
              command: bash -c "git ls-files --others --exclude-standard | wc -l"
              args:
                chdir: "{{ tmpdir.path }}"
              register: result
              changed_when: False
            - name: assert that git does not ignore README.md
              assert:
                that:
                  - result.stdout == "1"
                fail_msg: "actual result is {{ result.stdout }}"
